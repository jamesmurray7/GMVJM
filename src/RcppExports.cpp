// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// GP1_pmf_scalar
double GP1_pmf_scalar(const double mu, const double phi, const double Y);
RcppExport SEXP _gmvjoint_GP1_pmf_scalar(SEXP muSEXP, SEXP phiSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(GP1_pmf_scalar(mu, phi, Y));
    return rcpp_result_gen;
END_RCPP
}
// vech2mat
arma::mat vech2mat(const arma::vec& x, const int q);
RcppExport SEXP _gmvjoint_vech2mat(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(vech2mat(x, q));
    return rcpp_result_gen;
END_RCPP
}
// S_
double S_(const Rcpp::List& L, const arma::vec& gamma_rep, const arma::vec& zeta, const arma::vec& b);
RcppExport SEXP _gmvjoint_S_(SEXP LSEXP, SEXP gamma_repSEXP, SEXP zetaSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma_rep(gamma_repSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(S_(L, gamma_rep, zeta, b));
    return rcpp_result_gen;
END_RCPP
}
// make_eta
List make_eta(const List& X, const List& Z, const arma::vec& beta, const arma::vec& b, const List& beta_inds, const List& b_inds);
RcppExport SEXP _gmvjoint_make_eta(SEXP XSEXP, SEXP ZSEXP, SEXP betaSEXP, SEXP bSEXP, SEXP beta_indsSEXP, SEXP b_indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const List& >::type beta_inds(beta_indsSEXP);
    Rcpp::traits::input_parameter< const List& >::type b_inds(b_indsSEXP);
    rcpp_result_gen = Rcpp::wrap(make_eta(X, Z, beta, b, beta_inds, b_inds));
    return rcpp_result_gen;
END_RCPP
}
// make_tau
List make_tau(const List& Z, const List& Sigma);
RcppExport SEXP _gmvjoint_make_tau(SEXP ZSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(make_tau(Z, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// logfti
double logfti(const arma::vec& b, const arma::rowvec& S, const arma::mat& SS, const arma::rowvec& Fi, const arma::mat& Fu, const double l0i, const arma::rowvec& haz, const int Delta, const arma::vec& gamma_rep, const arma::vec& zeta);
RcppExport SEXP _gmvjoint_logfti(SEXP bSEXP, SEXP SSEXP, SEXP SSSEXP, SEXP FiSEXP, SEXP FuSEXP, SEXP l0iSEXP, SEXP hazSEXP, SEXP DeltaSEXP, SEXP gamma_repSEXP, SEXP zetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< const double >::type l0i(l0iSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< const int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma_rep(gamma_repSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    rcpp_result_gen = Rcpp::wrap(logfti(b, S, SS, Fi, Fu, l0i, haz, Delta, gamma_rep, zeta));
    return rcpp_result_gen;
END_RCPP
}
// joint_density
double joint_density(const arma::vec& b, const List& Y, const List& X, const List& Z, const List& W, const arma::vec& beta, const arma::mat& D, const List& sigma, const List& family, const int Delta, const arma::rowvec& S, const arma::rowvec& Fi, const double l0i, const arma::mat& SS, const arma::mat& Fu, const arma::rowvec& haz, const arma::vec& gamma_rep, const arma::vec& zeta, const List& beta_inds, const List& b_inds, const arma::uword K);
RcppExport SEXP _gmvjoint_joint_density(SEXP bSEXP, SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP WSEXP, SEXP betaSEXP, SEXP DSEXP, SEXP sigmaSEXP, SEXP familySEXP, SEXP DeltaSEXP, SEXP SSEXP, SEXP FiSEXP, SEXP l0iSEXP, SEXP SSSEXP, SEXP FuSEXP, SEXP hazSEXP, SEXP gamma_repSEXP, SEXP zetaSEXP, SEXP beta_indsSEXP, SEXP b_indsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const List& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< const double >::type l0i(l0iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma_rep(gamma_repSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const List& >::type beta_inds(beta_indsSEXP);
    Rcpp::traits::input_parameter< const List& >::type b_inds(b_indsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(joint_density(b, Y, X, Z, W, beta, D, sigma, family, Delta, S, Fi, l0i, SS, Fu, haz, gamma_rep, zeta, beta_inds, b_inds, K));
    return rcpp_result_gen;
END_RCPP
}
// joint_density_ddb
arma::vec joint_density_ddb(const arma::vec& b, const List& Y, const List& X, const List& Z, const List& W, const arma::vec& beta, const arma::mat& D, const List& sigma, const List& family, const int Delta, const arma::rowvec& S, const arma::rowvec& Fi, const double l0i, const arma::mat& SS, const arma::mat& Fu, const arma::rowvec& haz, const arma::vec& gamma_rep, const arma::vec& zeta, const List& beta_inds, const List& b_inds, const arma::uword K);
RcppExport SEXP _gmvjoint_joint_density_ddb(SEXP bSEXP, SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP WSEXP, SEXP betaSEXP, SEXP DSEXP, SEXP sigmaSEXP, SEXP familySEXP, SEXP DeltaSEXP, SEXP SSEXP, SEXP FiSEXP, SEXP l0iSEXP, SEXP SSSEXP, SEXP FuSEXP, SEXP hazSEXP, SEXP gamma_repSEXP, SEXP zetaSEXP, SEXP beta_indsSEXP, SEXP b_indsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const List& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< const double >::type l0i(l0iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma_rep(gamma_repSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< const List& >::type beta_inds(beta_indsSEXP);
    Rcpp::traits::input_parameter< const List& >::type b_inds(b_indsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(joint_density_ddb(b, Y, X, Z, W, beta, D, sigma, family, Delta, S, Fi, l0i, SS, Fu, haz, gamma_rep, zeta, beta_inds, b_inds, K));
    return rcpp_result_gen;
END_RCPP
}
// Sbeta
arma::vec Sbeta(const arma::vec& beta, const List& X, const List& Y, const List& Z, const List& W, const arma::vec& b, const List& sigma, const List& family, const List& beta_inds, const List& b_inds, const arma::uword& K, const List& tau, const arma::vec& w, const arma::vec& v);
RcppExport SEXP _gmvjoint_Sbeta(SEXP betaSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP WSEXP, SEXP bSEXP, SEXP sigmaSEXP, SEXP familySEXP, SEXP beta_indsSEXP, SEXP b_indsSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const List& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const List& >::type beta_inds(beta_indsSEXP);
    Rcpp::traits::input_parameter< const List& >::type b_inds(b_indsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const List& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(Sbeta(beta, X, Y, Z, W, b, sigma, family, beta_inds, b_inds, K, tau, w, v));
    return rcpp_result_gen;
END_RCPP
}
// Hbeta
arma::mat Hbeta(const arma::vec& beta, const List& X, const List& Y, const List& Z, const List& W, const arma::vec& b, const List& sigma, const List& family, const List& beta_inds, const List& b_inds, const arma::uword& K, const List& tau, const arma::vec& w, const arma::vec& v);
RcppExport SEXP _gmvjoint_Hbeta(SEXP betaSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP WSEXP, SEXP bSEXP, SEXP sigmaSEXP, SEXP familySEXP, SEXP beta_indsSEXP, SEXP b_indsSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const List& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const List& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const List& >::type beta_inds(beta_indsSEXP);
    Rcpp::traits::input_parameter< const List& >::type b_inds(b_indsSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const List& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(Hbeta(beta, X, Y, Z, W, b, sigma, family, beta_inds, b_inds, K, tau, w, v));
    return rcpp_result_gen;
END_RCPP
}
// appxE_Gammasigma
double appxE_Gammasigma(const arma::vec& sigma, const arma::vec& eta, const arma::vec& Y, const arma::vec& tau, const arma::mat& W, const arma::vec& w, const arma::vec& v);
RcppExport SEXP _gmvjoint_appxE_Gammasigma(SEXP sigmaSEXP, SEXP etaSEXP, SEXP YSEXP, SEXP tauSEXP, SEXP WSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(appxE_Gammasigma(sigma, eta, Y, tau, W, w, v));
    return rcpp_result_gen;
END_RCPP
}
// appxE_NegBinsigma
double appxE_NegBinsigma(const arma::vec& sigma, const arma::vec& eta, const arma::vec& Y, const arma::vec& tau, const arma::mat& W, const arma::vec& w, const arma::vec& v);
RcppExport SEXP _gmvjoint_appxE_NegBinsigma(SEXP sigmaSEXP, SEXP etaSEXP, SEXP YSEXP, SEXP tauSEXP, SEXP WSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(appxE_NegBinsigma(sigma, eta, Y, tau, W, w, v));
    return rcpp_result_gen;
END_RCPP
}
// appxE_GenPoissigma
double appxE_GenPoissigma(const arma::vec& sigma, const arma::vec& eta, const arma::vec& Y, const arma::vec& tau, const arma::mat& W, const arma::vec& w, const arma::vec& v);
RcppExport SEXP _gmvjoint_appxE_GenPoissigma(SEXP sigmaSEXP, SEXP etaSEXP, SEXP YSEXP, SEXP tauSEXP, SEXP WSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(appxE_GenPoissigma(sigma, eta, Y, tau, W, w, v));
    return rcpp_result_gen;
END_RCPP
}
// sigma2_Gaussian_update
double sigma2_Gaussian_update(const arma::vec& eta, const arma::vec& Y, const arma::vec& tau, const arma::vec& w, const arma::vec& v);
RcppExport SEXP _gmvjoint_sigma2_Gaussian_update(SEXP etaSEXP, SEXP YSEXP, SEXP tauSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(sigma2_Gaussian_update(eta, Y, tau, w, v));
    return rcpp_result_gen;
END_RCPP
}
// lambda_hat
arma::vec lambda_hat(Rcpp::List b, Rcpp::List Fu, Rcpp::List SS, Rcpp::List Sigma, arma::vec& gamma_rep, arma::vec& zeta, arma::vec& nev, arma::vec& w, arma::vec& v);
RcppExport SEXP _gmvjoint_lambda_hat(SEXP bSEXP, SEXP FuSEXP, SEXP SSSEXP, SEXP SigmaSEXP, SEXP gamma_repSEXP, SEXP zetaSEXP, SEXP nevSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma_rep(gamma_repSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nev(nevSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_hat(b, Fu, SS, Sigma, gamma_rep, zeta, nev, w, v));
    return rcpp_result_gen;
END_RCPP
}
// lambda_update
arma::vec lambda_update(Rcpp::List b, Rcpp::List Fu, Rcpp::List SS, Rcpp::List Sigma, Rcpp::List survtimes, arma::vec& gamma_rep, arma::vec& zeta, arma::vec& nev, arma::vec& w, arma::vec& v);
RcppExport SEXP _gmvjoint_lambda_update(SEXP bSEXP, SEXP FuSEXP, SEXP SSSEXP, SEXP SigmaSEXP, SEXP survtimesSEXP, SEXP gamma_repSEXP, SEXP zetaSEXP, SEXP nevSEXP, SEXP wSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type survtimes(survtimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gamma_rep(gamma_repSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nev(nevSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda_update(b, Fu, SS, Sigma, survtimes, gamma_rep, zeta, nev, w, v));
    return rcpp_result_gen;
END_RCPP
}
// Egammazeta
double Egammazeta(const arma::vec& gammazeta, const arma::vec& b, const arma::mat& Sigma, const arma::rowvec& S, const arma::mat& SS, const arma::mat& Fu, const arma::rowvec& Fi, const arma::vec& haz, const int Delta, const arma::vec& w, const arma::vec& v, const List& inds, const arma::uword K);
RcppExport SEXP _gmvjoint_Egammazeta(SEXP gammazetaSEXP, SEXP bSEXP, SEXP SigmaSEXP, SEXP SSEXP, SEXP SSSEXP, SEXP FuSEXP, SEXP FiSEXP, SEXP hazSEXP, SEXP DeltaSEXP, SEXP wSEXP, SEXP vSEXP, SEXP indsSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type gammazeta(gammazetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< const int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const List& >::type inds(indsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(Egammazeta(gammazeta, b, Sigma, S, SS, Fu, Fi, haz, Delta, w, v, inds, K));
    return rcpp_result_gen;
END_RCPP
}
// Sgammazeta
arma::vec Sgammazeta(arma::vec& gammazeta, arma::vec& b, arma::mat& Sigma, arma::rowvec& S, arma::mat& SS, arma::mat& Fu, arma::rowvec& Fi, arma::vec& haz, int Delta, arma::vec& w, arma::vec& v, Rcpp::List b_inds, int K, double eps);
RcppExport SEXP _gmvjoint_Sgammazeta(SEXP gammazetaSEXP, SEXP bSEXP, SEXP SigmaSEXP, SEXP SSEXP, SEXP SSSEXP, SEXP FuSEXP, SEXP FiSEXP, SEXP hazSEXP, SEXP DeltaSEXP, SEXP wSEXP, SEXP vSEXP, SEXP b_indsSEXP, SEXP KSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type gammazeta(gammazetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type b_inds(b_indsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(Sgammazeta(gammazeta, b, Sigma, S, SS, Fu, Fi, haz, Delta, w, v, b_inds, K, eps));
    return rcpp_result_gen;
END_RCPP
}
// Hgammazeta
arma::mat Hgammazeta(arma::vec& gammazeta, arma::vec& b, arma::mat& Sigma, arma::rowvec& S, arma::mat& SS, arma::mat& Fu, arma::rowvec& Fi, arma::vec& haz, int Delta, arma::vec& w, arma::vec& v, Rcpp::List b_inds, int K, double eps);
RcppExport SEXP _gmvjoint_Hgammazeta(SEXP gammazetaSEXP, SEXP bSEXP, SEXP SigmaSEXP, SEXP SSEXP, SEXP SSSEXP, SEXP FuSEXP, SEXP FiSEXP, SEXP hazSEXP, SEXP DeltaSEXP, SEXP wSEXP, SEXP vSEXP, SEXP b_indsSEXP, SEXP KSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type gammazeta(gammazetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type b_inds(b_indsSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(Hgammazeta(gammazeta, b, Sigma, S, SS, Fu, Fi, haz, Delta, w, v, b_inds, K, eps));
    return rcpp_result_gen;
END_RCPP
}
// metropolis
List metropolis(const arma::vec& b, const List& Omega, const List& Y, const List& X, const List& Z, const List& W, const List& family, const int Delta, const arma::rowvec& S, const arma::rowvec& Fi, const double l0i, const arma::mat& SS, const arma::mat& Fu, const arma::rowvec& haz, const arma::vec& gamma_rep, const List& beta_inds, const List& b_inds, const arma::uword K, const arma::uword q, const int burnin, const int N, const arma::mat& Sigma, const double tune);
RcppExport SEXP _gmvjoint_metropolis(SEXP bSEXP, SEXP OmegaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP WSEXP, SEXP familySEXP, SEXP DeltaSEXP, SEXP SSEXP, SEXP FiSEXP, SEXP l0iSEXP, SEXP SSSEXP, SEXP FuSEXP, SEXP hazSEXP, SEXP gamma_repSEXP, SEXP beta_indsSEXP, SEXP b_indsSEXP, SEXP KSEXP, SEXP qSEXP, SEXP burninSEXP, SEXP NSEXP, SEXP SigmaSEXP, SEXP tuneSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const List& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< const List& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const List& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const List& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const List& >::type W(WSEXP);
    Rcpp::traits::input_parameter< const List& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const int >::type Delta(DeltaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Fi(FiSEXP);
    Rcpp::traits::input_parameter< const double >::type l0i(l0iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type SS(SSSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fu(FuSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type haz(hazSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma_rep(gamma_repSEXP);
    Rcpp::traits::input_parameter< const List& >::type beta_inds(beta_indsSEXP);
    Rcpp::traits::input_parameter< const List& >::type b_inds(b_indsSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type q(qSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type tune(tuneSEXP);
    rcpp_result_gen = Rcpp::wrap(metropolis(b, Omega, Y, X, Z, W, family, Delta, S, Fi, l0i, SS, Fu, haz, gamma_rep, beta_inds, b_inds, K, q, burnin, N, Sigma, tune));
    return rcpp_result_gen;
END_RCPP
}
// dmvn_fast
double dmvn_fast(const arma::vec& x, const arma::vec& mn, const arma::mat& Sigma, const bool log__);
RcppExport SEXP _gmvjoint_dmvn_fast(SEXP xSEXP, SEXP mnSEXP, SEXP SigmaSEXP, SEXP log__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mn(mnSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const bool >::type log__(log__SEXP);
    rcpp_result_gen = Rcpp::wrap(dmvn_fast(x, mn, Sigma, log__));
    return rcpp_result_gen;
END_RCPP
}
// dmvt_fast
double dmvt_fast(const arma::vec& x, const arma::vec& mn, const arma::mat& Sigma, const double df, const bool log__);
RcppExport SEXP _gmvjoint_dmvt_fast(SEXP xSEXP, SEXP mnSEXP, SEXP SigmaSEXP, SEXP dfSEXP, SEXP log__SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mn(mnSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< const bool >::type log__(log__SEXP);
    rcpp_result_gen = Rcpp::wrap(dmvt_fast(x, mn, Sigma, df, log__));
    return rcpp_result_gen;
END_RCPP
}
