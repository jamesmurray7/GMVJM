useDynLib(gmvjoint, .registration=TRUE)
importFrom(Rcpp, evalCpp)
importFrom("methods", "el")
importFrom("stats", "Gamma", "as.formula", "binomial", "coef", "cov",
           "gaussian", "model.matrix", "optim", "plogis", "poisson",
           "dnorm", "dbinom", "dpois", "dgamma",
           "rbinom", "rexp", "rgamma", "rnorm", "rpois", "runif",
           "setNames", "pnorm", "qnorm", "cov2cor", "fitted",
           "median", "vcov", "quantile", "pchisq", "AIC", "logLik", "sd",
           "predict", "density")
importFrom("graphics", "plot", "par", "abline", "lines", "axis", "legend", "arrows", "curve",
           "mtext", "points")
importFrom("utils", "head", "capture.output")
importFrom("statmod", "gauss.quad.prob")
importFrom('pracma', 'grad', 'hessian', 'nearest_spd')
importFrom("mvtnorm", "dmvnorm")
importFrom("xtable", "xtable")
import(glmmTMB)
import(survival)

S3method(print, parseCoxph)
S3method(print, joint)
S3method(summary, joint)
S3method(print, summary.joint)
S3method(logLik, joint)
S3method(vcov, joint)
S3method(fixef, joint)
S3method(ranef, joint)
S3method(extractAIC, joint)
S3method(fitted, joint)
S3method(residuals, joint)
S3method(plot, residuals.joint)
S3method(print, residuals.joint)
S3method(print, dynPred)
S3method(plot, dynPred)
S3method(anova, joint)
S3method(print, anova.joint)
S3method(print, cond.b.joint)
S3method(plot, cond.b.joint)
S3method(xtable, joint)
S3method(print, boot.joint)
S3method(print, ROC.joint)
S3method(plot, ROC.joint)

export(joint)
export(simData)
export(parseCoxph)
export(dynPred)
export(rgenpois)
export(cond.ranefs)
export(xtable.joint)
export(boot.joint)
export(ROC)
